/*
  sonoff_aws_iot.cpp - TLS AWS IoT for Sonoff-Tasmota - Private key

  Copyright (C) 2019  Theo Arends

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "my_user_config.h"
#ifdef USE_MQTT_AWS_IOT

#include <t_bearssl.h>
#include <pgmspace.h>

// nasty hack to force PROGMEM
#define static static PROGMEM

namespace aws_iot_privkey {
/*********************************************************************************************\
 * Private key for AWS IoT
 *
 * Create the private key, generate the CSR and sign it with AWS IoT Console.
 *
 * Then generate C version of Private Key and Certificate, cut and paste below
 *
 * Downloaded from https://www.identrust.com/support/downloads
\*********************************************************************************************/

/*********************************************************************************************\
 * Export Private Key as a C structure
 *
 * $ bearssl skey -C <private_key.PEM>
\*********************************************************************************************/

/* --------------- CUT AND PASTE PRIVATE KEY BELOW --------------- */
/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */

static const unsigned char EC_X[] = {
	0xA2, 0xFB, 0x94, 0xB8, 0x8E, 0x0D, 0x77, 0x10, 0x86, 0xE1, 0x6D, 0x7C,
	0x70, 0x47, 0x48, 0xC9, 0x47, 0x4A, 0xC6, 0x45, 0x48, 0xD1, 0x5D, 0xDA,
	0xA0, 0xB7, 0x76, 0x43, 0x8B, 0xCD, 0x87, 0x45
};

static const br_ec_private_key EC = {
	23,
	(unsigned char *)EC_X, sizeof EC_X
};

/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
/* --------------- CUT AND PASTE PRIVATE KEY ABOVE --------------- */

/*********************************************************************************************\
 * Export Private Key as a C structure
 *
 * $ bearssl chain <certificate.PEM>
\*********************************************************************************************/

/* --------------- CUT AND PASTE PRIVATE KEY BELOW --------------- */
/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */

static const unsigned char CERT0[] = {
	0x30, 0x82, 0x02, 0x7E, 0x30, 0x82, 0x01, 0x66, 0xA0, 0x03, 0x02, 0x01,
	0x02, 0x02, 0x15, 0x00, 0xA8, 0x7F, 0x7F, 0xB1, 0x81, 0x16, 0x89, 0xDF,
	0x7C, 0xE5, 0x30, 0x07, 0xF5, 0x3C, 0xB9, 0xAD, 0x4E, 0x3A, 0xC9, 0x64,
	0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01,
	0x0B, 0x05, 0x00, 0x30, 0x4D, 0x31, 0x4B, 0x30, 0x49, 0x06, 0x03, 0x55,
	0x04, 0x0B, 0x0C, 0x42, 0x41, 0x6D, 0x61, 0x7A, 0x6F, 0x6E, 0x20, 0x57,
	0x65, 0x62, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x4F, 0x3D, 0x41, 0x6D, 0x61, 0x7A, 0x6F, 0x6E, 0x2E, 0x63, 0x6F, 0x6D,
	0x20, 0x49, 0x6E, 0x63, 0x2E, 0x20, 0x4C, 0x3D, 0x53, 0x65, 0x61, 0x74,
	0x74, 0x6C, 0x65, 0x20, 0x53, 0x54, 0x3D, 0x57, 0x61, 0x73, 0x68, 0x69,
	0x6E, 0x67, 0x74, 0x6F, 0x6E, 0x20, 0x43, 0x3D, 0x55, 0x53, 0x30, 0x1E,
	0x17, 0x0D, 0x31, 0x39, 0x30, 0x36, 0x33, 0x30, 0x31, 0x30, 0x31, 0x31,
	0x31, 0x37, 0x5A, 0x17, 0x0D, 0x34, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32,
	0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x0D, 0x31, 0x0B, 0x30, 0x09,
	0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x45, 0x55, 0x30, 0x59, 0x30,
	0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08,
	0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,
	0x06, 0x96, 0x04, 0xE3, 0x4C, 0x41, 0x9E, 0x96, 0xB6, 0xAD, 0xDD, 0x0F,
	0xC5, 0x1D, 0xA7, 0x2D, 0x35, 0xAD, 0x7C, 0xCF, 0xB3, 0xFF, 0xE5, 0xD0,
	0xCF, 0x13, 0x0F, 0xBD, 0xB9, 0x31, 0x4C, 0x9E, 0xC5, 0xD5, 0x37, 0x2E,
	0xEA, 0x31, 0xAE, 0x3B, 0x96, 0xE9, 0x43, 0x46, 0x8E, 0x0D, 0x42, 0x62,
	0xA3, 0xE0, 0x8D, 0x1F, 0x9B, 0xA2, 0x2B, 0x10, 0x50, 0xC4, 0x63, 0x00,
	0x6C, 0x33, 0x23, 0xC0, 0xA3, 0x60, 0x30, 0x5E, 0x30, 0x1F, 0x06, 0x03,
	0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x46, 0xFE, 0xF6,
	0xB8, 0x24, 0x9C, 0x84, 0xA4, 0x38, 0x2C, 0xAC, 0xF5, 0xCB, 0xEB, 0x95,
	0x08, 0xD3, 0x4E, 0xC6, 0x38, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E,
	0x04, 0x16, 0x04, 0x14, 0x19, 0x3E, 0x5B, 0x74, 0x42, 0x6C, 0x62, 0xF2,
	0x5B, 0x55, 0x72, 0x9B, 0xC9, 0x23, 0x3C, 0xFA, 0x86, 0xC2, 0x7C, 0xC3,
	0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02,
	0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF,
	0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86,
	0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01,
	0x01, 0x00, 0x6C, 0x7A, 0x14, 0x3F, 0x5B, 0xA2, 0xF2, 0x34, 0xCE, 0xB3,
	0xAB, 0xEE, 0x60, 0xF1, 0x23, 0x32, 0x33, 0x24, 0x84, 0x1B, 0xAD, 0x03,
	0xAE, 0x54, 0x78, 0x92, 0xB0, 0xE2, 0xFB, 0x98, 0xFD, 0x2E, 0xC8, 0x06,
	0xD6, 0x13, 0xEF, 0xFB, 0xE0, 0x8C, 0x7D, 0x28, 0x7A, 0xA4, 0x51, 0x2B,
	0xF3, 0x07, 0xFB, 0x55, 0xE9, 0x89, 0xD8, 0x6A, 0x9F, 0xA6, 0xEC, 0x36,
	0x8D, 0x24, 0xB5, 0x97, 0x95, 0xAC, 0x54, 0xD6, 0xEB, 0xB7, 0x4C, 0x69,
	0x00, 0xB7, 0x20, 0x84, 0x91, 0x20, 0x5B, 0x95, 0xBA, 0xD7, 0x32, 0x80,
	0xAB, 0xD3, 0xF2, 0x8C, 0x24, 0xC2, 0xCE, 0xB8, 0x73, 0xD9, 0x5E, 0xF6,
	0x03, 0xC9, 0x4F, 0xBC, 0x53, 0x8A, 0xEB, 0x82, 0xD3, 0x03, 0x53, 0x92,
	0xE7, 0x48, 0x86, 0xFB, 0xA4, 0x71, 0x20, 0x64, 0x0B, 0x74, 0x2F, 0x70,
	0x85, 0xB7, 0xF5, 0xFC, 0x34, 0x1A, 0xD1, 0x7C, 0xEF, 0xAB, 0xDA, 0xED,
	0x1C, 0x8C, 0x40, 0x70, 0x0F, 0x3C, 0xEE, 0x9A, 0x9C, 0x36, 0xAB, 0xA1,
	0x3B, 0x8D, 0xDB, 0xEF, 0x7A, 0xEE, 0x5A, 0x44, 0xFC, 0x31, 0x0C, 0x21,
	0x67, 0x96, 0x1D, 0x6D, 0x43, 0x57, 0xA7, 0xB0, 0x69, 0x3A, 0x4E, 0xA4,
	0x17, 0x54, 0x4F, 0x64, 0x75, 0x8F, 0x24, 0x4C, 0xFD, 0x89, 0x74, 0x37,
	0x36, 0x27, 0x68, 0x9D, 0x33, 0xBC, 0xA8, 0xCE, 0x9B, 0xBC, 0xAD, 0x5A,
	0xA1, 0xFC, 0x2A, 0x40, 0x82, 0x30, 0xE3, 0x23, 0xAE, 0x2B, 0x2F, 0x35,
	0x20, 0x28, 0x46, 0x39, 0x2A, 0x99, 0x13, 0x0E, 0x9C, 0x12, 0x9B, 0xDD,
	0x3A, 0x58, 0xDA, 0x17, 0xD1, 0x95, 0x0F, 0x02, 0xC6, 0xB9, 0x03, 0x5C,
	0xFB, 0x8C, 0x2D, 0x4D, 0xF5, 0x44, 0x6E, 0x40, 0x34, 0x7B, 0xEC, 0x9F,
	0xED, 0x35, 0xA3, 0xB7, 0xEF, 0x99, 0x89, 0x88, 0x9B, 0x8F, 0xCB, 0x63,
	0x55, 0xE8, 0x82, 0xEE, 0xF2, 0x43
};

static const br_x509_certificate CHAIN[] = {
	{ (unsigned char *)CERT0, sizeof CERT0 }
};

#define CHAIN_LEN   1

/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
/* --------------- CUT AND PASTE PRIVATE KEY ABOVE --------------- */

const br_ec_private_key *AWS_IoT_Private_Key = &EC;
const br_x509_certificate *AWS_IoT_Client_Certificate = &CHAIN[0];

}

#endif  // USE_MQTT_AWS_IOT
